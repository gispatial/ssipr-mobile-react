'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _events = require('../utils/events');

var _events2 = _interopRequireDefault(_events);

var _Drag = require('../Drag');

var _Drag2 = _interopRequireDefault(_Drag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SwipeAction = function (_PureComponent) {
  _inherits(SwipeAction, _PureComponent);

  function SwipeAction(props) {
    _classCallCheck(this, SwipeAction);

    var _this = _possibleConstructorReturn(this, (SwipeAction.__proto__ || Object.getPrototypeOf(SwipeAction)).call(this, props));

    _this.onDragStart = function () {
      if (_this.isOpen) {
        _this.touchEnd = false;
        _this.close();
        return;
      }
      _this.touchEnd = true;
    };

    _this.onDragMove = function (event, _ref) {
      var offsetX = _ref.offsetX,
          offsetY = _ref.offsetY;

      if (!_this.touchEnd) return;

      var disabled = _this.props.disabled;

      if (disabled) return;

      // 拖动距离达到上限
      var offset = _this.props.offset;
      var offsetLeft = _this.state.offsetLeft;

      var btnsLeftWidth = _this.left && _this.left.offsetWidth;
      var btnsRightWidth = _this.right && _this.right.offsetWidth;
      if (offsetX > 0 && (!btnsLeftWidth || offsetLeft >= btnsLeftWidth + offset)) return false;
      if (offsetX < 0 && (!btnsRightWidth || offsetLeft <= -btnsRightWidth - offset)) return false;

      // 判断滚屏情况
      var distanceX = Math.abs(offsetX);
      var distanceY = Math.abs(offsetY);
      if (distanceX < 5 || distanceX >= 5 && distanceY >= 0.3 * distanceX) return false;

      event.preventDefault();

      _this.doTransition({ offsetLeft: offsetX, animationDuration: 0 });
      return true;
    };

    _this.onDragEnd = function (event, _ref2) {
      var offsetX = _ref2.offsetX,
          startTime = _ref2.startTime;
      var _this$props = _this.props,
          animationDuration = _this$props.animationDuration,
          moveDistanceRatio = _this$props.moveDistanceRatio,
          moveTimeSpan = _this$props.moveTimeSpan;

      var timeSpan = new Date().getTime() - startTime.getTime();
      var btnsLeftWidth = _this.left && _this.left.offsetWidth;
      var btnsRightWidth = _this.right && _this.right.offsetWidth;

      var distanceX = 0;
      var isOpen = false;

      if (offsetX / btnsLeftWidth > moveDistanceRatio || offsetX > 0 && timeSpan <= moveTimeSpan) {
        distanceX = btnsLeftWidth;
        isOpen = true;
      } else if (offsetX / btnsRightWidth < -moveDistanceRatio || offsetX < 0 && timeSpan <= moveTimeSpan) {
        distanceX = -btnsRightWidth;
        isOpen = true;
      }

      if (isOpen && !_this.isOpen) {
        // 打开
        _this.open(distanceX);
      } else if (!isOpen && _this.isOpen) {
        // 关闭
        _this.close();
      } else {
        // 还原
        _this.doTransition({ offsetLeft: distanceX, animationDuration: animationDuration });
      }
    };

    _this.onBtnClick = function (e, btn) {
      e.preventDefault();
      var onClick = btn.onClick;
      if (onClick) {
        onClick(e);
      }

      if (_this.props.autoClose) {
        _this.close();
      }
    };

    _this.onCloseSwipe = function (e) {
      if (!_this.wrap) return;

      if (_this.isOpen) {
        var pNode = function (node) {
          while (node.parentNode && node.parentNode !== document.body) {
            if (node === _this.wrap) {
              return node;
            }
            node = node.parentNode;
          }
        }(e.target);

        if (!pNode) {
          e.preventDefault();
          _this.touchEnd = true;
          _this.close();
        }
      }
    };

    _this.open = function (offsetLeft) {
      var _this$props2 = _this.props,
          animationDuration = _this$props2.animationDuration,
          onOpen = _this$props2.onOpen;

      _this.isOpen = true;
      _this.doTransition({ offsetLeft: offsetLeft, animationDuration: animationDuration });
      typeof onOpen === 'function' && onOpen();
    };

    _this.close = function () {
      var _this$props3 = _this.props,
          animationDuration = _this$props3.animationDuration,
          onClose = _this$props3.onClose;

      _this.isOpen = false;
      _this.doTransition({ offsetLeft: 0, animationDuration: animationDuration });
      typeof onClose === 'function' && onClose();
    };

    _this.doTransition = function (_ref3) {
      var offsetLeft = _ref3.offsetLeft,
          animationDuration = _ref3.animationDuration;

      _this.setState({ offsetLeft: offsetLeft, animationDuration: animationDuration });
    };

    _this.renderButtons = function (buttons, _ref4) {
      var prefixCls = _this.props.prefixCls;

      return buttons && buttons.length ? _react2.default.createElement(
        'div',
        {
          className: prefixCls + '-actions-' + _ref4,
          ref: function ref(el) {
            _this[_ref4] = el;
          } },
        buttons.map(function (btn, i) {
          var theme = btn.theme,
              className = btn.className,
              text = btn.text;

          var classes = (0, _classnames3.default)(prefixCls + '-button', className, _defineProperty({}, 'theme-' + theme, true));

          return _react2.default.createElement(
            'div',
            {
              key: +i,
              className: classes,
              onClick: function onClick(e) {
                return _this.onBtnClick(e, btn);
              } },
            _react2.default.createElement(
              'div',
              { className: prefixCls + '-text' },
              text || '' + _ref4 + i
            )
          );
        })
      ) : null;
    };

    _this.state = {
      offsetLeft: 0
    };
    _this.isOpen = false;
    _this.touchEnd = true;
    return _this;
  }

  _createClass(SwipeAction, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _events2.default.on(document.body, 'touchstart', function (e) {
        return _this2.onCloseSwipe(e);
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _this3 = this;

      _events2.default.off(document.body, 'touchstart', function (e) {
        return _this3.onCloseSwipe(e);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          className = _props.className,
          left = _props.left,
          right = _props.right,
          children = _props.children;
      var _state = this.state,
          offsetLeft = _state.offsetLeft,
          animationDuration = _state.animationDuration;

      var cls = (0, _classnames3.default)('' + prefixCls, className);
      var style = {
        WebkitTransitionDuration: animationDuration + 'ms',
        transitionDuration: animationDuration + 'ms',
        WebkitTransform: 'translate3d(' + offsetLeft + 'px, 0, 0)',
        transform: 'translate3d(' + offsetLeft + 'px, 0, 0)'
      };

      return left.length || right.length ? _react2.default.createElement(
        'div',
        { className: cls, ref: function ref(wrap) {
            _this4.wrap = wrap;
          } },
        this.renderButtons(left, 'left'),
        this.renderButtons(right, 'right'),
        _react2.default.createElement(
          _Drag2.default,
          {
            onDragStart: this.onDragStart,
            onDragMove: this.onDragMove,
            onDragEnd: this.onDragEnd },
          _react2.default.createElement(
            'div',
            { className: prefixCls + '-content', style: style },
            children
          )
        )
      ) : children;
    }
  }]);

  return SwipeAction;
}(_react.PureComponent);

SwipeAction.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  left: _propTypes2.default.arrayOf(_propTypes2.default.object),
  right: _propTypes2.default.arrayOf(_propTypes2.default.object),
  moveDistanceRatio: _propTypes2.default.number,
  moveTimeSpan: _propTypes2.default.number,
  animationDuration: _propTypes2.default.number,
  offset: _propTypes2.default.number,
  onOpen: _propTypes2.default.func,
  onClose: _propTypes2.default.func
};

SwipeAction.defaultProps = {
  prefixCls: 'za-swipeaction',
  left: [],
  right: [],
  moveDistanceRatio: 0.5,
  moveTimeSpan: 300,
  animationDuration: 300,
  offset: 10
};

exports.default = SwipeAction;