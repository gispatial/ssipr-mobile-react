'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Drag = function (_PureComponent) {
  _inherits(Drag, _PureComponent);

  function Drag(props) {
    _classCallCheck(this, Drag);

    var _this = _possibleConstructorReturn(this, (Drag.__proto__ || Object.getPrototypeOf(Drag)).call(this, props));

    _this.onTouchStart = function (event) {
      var dragState = _this.dragState;
      var touch = event.touches[0];

      dragState.startX = touch.pageX;
      dragState.startY = touch.pageY;
      dragState.startTime = new Date();

      var onDragStart = _this.props.onDragStart;

      onDragStart(event, dragState);
    };

    _this.onTouchMove = function (event) {
      var dragState = _this.dragState;
      var touch = event.touches[0];

      var currentX = touch.pageX;
      var currentY = touch.pageY;

      var offsetX = currentX - dragState.startX;
      var offsetY = currentY - dragState.startY;

      var state = _extends({}, dragState, {
        offsetX: offsetX,
        offsetY: offsetY,
        currentX: currentX,
        currentY: currentY
      });

      var onDragMove = _this.props.onDragMove;

      if (!onDragMove(event, state)) return;

      _this.dragState = state;
    };

    _this.onTouchEnd = function (event) {
      var dragState = _this.dragState;
      var onDragEnd = _this.props.onDragEnd;

      onDragEnd(event, dragState);
      _this.dragState = {};
    };

    _this.dragState = {};
    return _this;
  }

  _createClass(Drag, [{
    key: 'render',
    value: function render() {
      var children = this.props.children;

      return (0, _react.cloneElement)(children, {
        onTouchStart: this.onTouchStart,
        onTouchMove: this.onTouchMove,
        onTouchEnd: this.onTouchEnd
      });
    }
  }]);

  return Drag;
}(_react.PureComponent);

Drag.propTypes = {
  onDragStart: _propTypes2.default.func,
  onDragMove: _propTypes2.default.func,
  onDragEnd: _propTypes2.default.func
};

Drag.defaultProps = {
  onDragStart: function onDragStart() {},
  onDragMove: function onDragMove() {},
  onDragEnd: function onDragEnd() {}
};

exports.default = Drag;