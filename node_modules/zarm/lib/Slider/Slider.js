'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _Drag = require('../Drag');

var _Drag2 = _interopRequireDefault(_Drag);

var _Tooltip = require('../Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getValue(props, defaultValue) {
  if ('value' in props) {
    return props.value;
  }
  if ('defaultValue' in props) {
    return props.defaultValue;
  }
  return defaultValue;
}

var Slider = function (_PureComponent) {
  _inherits(Slider, _PureComponent);

  function Slider(props) {
    _classCallCheck(this, Slider);

    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

    _this.onDragStart = function () {
      var disabled = _this.props.disabled;

      if (disabled) return;
      _this.setState({ tooltip: true });
    };

    _this.onDragMove = function (event, _ref) {
      var offsetX = _ref.offsetX;
      var disabled = _this.props.disabled;

      if (disabled) return;

      event.preventDefault();

      var offset = _this.offsetStart + offsetX;
      if (offset < 0) {
        offset = 0;
        var _value = _this.getValueByOffset(offset);
        _this.setState({ offset: offset, value: _value });
        return false;
      }

      if (offset > _this.maxOffset()) {
        offset = _this.maxOffset();
        var _value2 = _this.getValueByOffset(offset);
        _this.setState({ offset: offset, value: _value2 });
        return false;
      }

      var value = _this.getValueByOffset(offset);
      offset = _this.getOffsetByValue(value);
      _this.setState({ offset: offset, value: value });
      return true;
    };

    _this.onDragEnd = function (event, _ref2) {
      var offsetX = _ref2.offsetX;

      _this.setState({ tooltip: false });
      if (isNaN(offsetX)) return;

      _this.offsetStart += offsetX;

      var onChange = _this.props.onChange;

      typeof onChange === 'function' && onChange();
    };

    _this.getValueByOffset = function (offset) {
      var _this$props = _this.props,
          min = _this$props.min,
          max = _this$props.max,
          step = _this$props.step;

      var percent = offset / _this.maxOffset();
      var value = Math.round((min + (max - min) * percent) / step) * step;
      return Math.max(Math.min(value, max), min);
    };

    _this.getOffsetByValue = function (value) {
      var _this$props2 = _this.props,
          min = _this$props2.min,
          max = _this$props2.max;

      return _this.maxOffset() * ((value - min) / (max - min));
    };

    _this.maxOffset = function () {
      return _this.line ? _this.line.offsetWidth : 0;
    };

    _this.init = function () {
      var offset = _this.getOffsetByValue(_this.state.value);
      _this.offsetStart = offset;
      _this.setState({ offset: offset });
    };

    _this.state = {
      value: getValue(props, 0),
      offset: 0,
      tooltip: false
    };
    _this.offsetStart = 0;
    return _this;
  }

  _createClass(Slider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.init();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        var value = nextProps.value;
        var offset = this.getOffsetByValue(value);
        this.setState({ value: value, offset: offset });
      }
    }

    /**
     * 通过偏移量确定值
     * @param  {number} offset 偏移量
     * @return {number}        值
     */


    /**
     * 通过值获取偏移量
     * @param  {number} value 值
     * @return {number}       偏移量
     */


    /**
     * 获取最大偏移量
     */


    /**
     * 初始化
     */

  }, {
    key: 'render',
    value: function render() {
      var _classnames,
          _this2 = this;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          className = _props.className,
          disabled = _props.disabled,
          min = _props.min,
          max = _props.max;
      var _state = this.state,
          value = _state.value,
          offset = _state.offset,
          tooltip = _state.tooltip;


      var cls = (0, _classnames3.default)((_classnames = {}, _defineProperty(_classnames, '' + prefixCls, true), _defineProperty(_classnames, className, !!className), _defineProperty(_classnames, 'disabled', disabled), _classnames));

      return _react2.default.createElement(
        'div',
        { className: cls },
        _react2.default.createElement(
          'div',
          { className: prefixCls + '-line', ref: function ref(ele) {
              _this2.line = ele;
            } },
          _react2.default.createElement('div', { className: prefixCls + '-line-bg', style: { width: offset } })
        ),
        _react2.default.createElement(
          _Drag2.default,
          {
            onDragStart: this.onDragStart,
            onDragMove: this.onDragMove,
            onDragEnd: this.onDragEnd },
          _react2.default.createElement(
            'div',
            {
              className: prefixCls + '-handle',
              role: 'slider',
              'aria-valuemin': min,
              'aria-valuemax': max,
              'aria-valuenow': value,
              style: { left: offset } },
            _react2.default.createElement(
              _Tooltip2.default,
              { visible: tooltip, message: value },
              _react2.default.createElement('div', { className: prefixCls + '-handle-shadow' })
            )
          )
        )
      );
    }
  }]);

  return Slider;
}(_react.PureComponent);

Slider.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  value: _propTypes2.default.number,
  defaultValue: _propTypes2.default.number, // eslint-disable-line
  step: _propTypes2.default.number,
  min: _propTypes2.default.number,
  max: _propTypes2.default.number,
  onChange: _propTypes2.default.func
};

Slider.defaultProps = {
  prefixCls: 'za-slider',
  disabled: false,
  step: 1,
  min: 0,
  max: 100
};

exports.default = Slider;