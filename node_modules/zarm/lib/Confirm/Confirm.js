'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Modal = require('../Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Confirm = function (_PureComponent) {
  _inherits(Confirm, _PureComponent);

  function Confirm() {
    _classCallCheck(this, Confirm);

    return _possibleConstructorReturn(this, (Confirm.__proto__ || Object.getPrototypeOf(Confirm)).apply(this, arguments));
  }

  _createClass(Confirm, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          prefixCls = _props.prefixCls,
          title = _props.title,
          message = _props.message,
          okText = _props.okText,
          cancelText = _props.cancelText,
          onOk = _props.onOk,
          onCancel = _props.onCancel,
          others = _objectWithoutProperties(_props, ['prefixCls', 'title', 'message', 'okText', 'cancelText', 'onOk', 'onCancel']);

      return _react2.default.createElement(
        _Modal2.default,
        others,
        _react2.default.createElement(_Modal2.default.Header, { title: title }),
        _react2.default.createElement(
          _Modal2.default.Body,
          null,
          _react2.default.createElement(
            'div',
            { className: prefixCls },
            message
          )
        ),
        _react2.default.createElement(
          _Modal2.default.Footer,
          null,
          _react2.default.createElement(
            _Button2.default,
            { block: true, bordered: true, onClick: onCancel },
            cancelText
          ),
          _react2.default.createElement(
            _Button2.default,
            { block: true, bordered: true, theme: 'primary', onClick: onOk },
            okText
          )
        )
      );
    }
  }]);

  return Confirm;
}(_react.PureComponent);

Confirm.propTypes = {
  prefixCls: _propTypes2.default.string,
  animationType: _Modal2.default.propTypes.animationType,
  message: _propTypes2.default.string,
  okText: _propTypes2.default.string,
  cancelText: _propTypes2.default.string,
  onOk: _propTypes2.default.func,
  onCancel: _propTypes2.default.func
};

Confirm.defaultProps = {
  prefixCls: 'za-confirm',
  animationType: 'zoom',
  message: '',
  okText: '确定',
  cancelText: '取消'
};

exports.default = Confirm;