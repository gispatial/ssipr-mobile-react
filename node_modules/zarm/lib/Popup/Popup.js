'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

var _events = require('../utils/events');

var _events2 = _interopRequireDefault(_events);

var _Mask = require('../Mask');

var _Mask2 = _interopRequireDefault(_Mask);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Popup = function (_PureComponent) {
  _inherits(Popup, _PureComponent);

  function Popup(props) {
    _classCallCheck(this, Popup);

    var _this = _possibleConstructorReturn(this, (Popup.__proto__ || Object.getPrototypeOf(Popup)).call(this, props));

    _this.enter = function (_ref) {
      var stayTime = _ref.stayTime,
          autoClose = _ref.autoClose,
          onMaskClick = _ref.onMaskClick;

      _this.setState({
        isShow: true,
        isMaskShow: true,
        isPending: true,
        animationState: 'enter'
      });

      if (stayTime === 0) {
        return;
      }

      if (autoClose) {
        _this.timer = setTimeout(function () {
          onMaskClick();
          clearTimeout(_this.timer);
        }, stayTime);
      }
    };

    _this.leave = function () {
      _this.setState({
        isShow: false,
        isPending: true,
        animationState: 'leave'
      });
    };

    _this.animationEnd = function () {
      var onClose = _this.props.onClose;
      var animationState = _this.state.animationState;


      if (animationState === 'leave') {
        _this.setState({
          isMaskShow: false
        });
        typeof onClose === 'function' && onClose();
      }
    };

    _this.timer = null;
    _this.state = {
      isShow: props.visible || false,
      isMaskShow: props.visible || false,
      isPending: false,
      animationState: 'enter'
    };
    return _this;
  }

  _createClass(Popup, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _events2.default.on(this.popup, 'webkitTransitionEnd', this.animationEnd);
      _events2.default.on(this.popup, 'transitionend', this.animationEnd);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      clearTimeout(this.timer);

      if (nextProps.visible) {
        this.enter(nextProps);
      } else {
        this.leave();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _events2.default.off(this.popup, 'webkitTransitionEnd', this.animationEnd);
      _events2.default.off(this.popup, 'transitionend', this.animationEnd);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          children = _props.children,
          onMaskClick = _props.onMaskClick,
          animationDuration = _props.animationDuration,
          direction = _props.direction,
          className = _props.className,
          maskType = _props.maskType;
      var _state = this.state,
          isShow = _state.isShow,
          isPending = _state.isPending,
          animationState = _state.animationState,
          isMaskShow = _state.isMaskShow;


      var cls = {
        popup: (0, _classnames4.default)('' + prefixCls, className, _defineProperty({}, prefixCls + '-hidden', !isShow)),
        wrap: (0, _classnames4.default)(prefixCls + '-wrapper', prefixCls + '-wrapper-' + direction),
        mask: (0, _classnames4.default)(_defineProperty({}, 'fade-' + animationState, isPending))
      };

      var style = {
        wrap: {
          WebkitTransitionDuration: animationDuration + 'ms',
          transitionDuration: animationDuration + 'ms'
        },
        mask: {
          WebkitAnimationDuration: animationDuration + 'ms',
          animationDuration: animationDuration + 'ms'
        }
      };

      return _react2.default.createElement(
        'div',
        { className: cls.popup, ref: function ref(popup) {
            _this2.popup = popup;
          } },
        _react2.default.createElement(
          'div',
          { className: cls.wrap, style: style.wrap },
          children
        ),
        this.props.mask && _react2.default.createElement(_Mask2.default, { className: cls.mask, style: style.mask, visible: isMaskShow, type: maskType, onClose: onMaskClick })
      );
    }
  }]);

  return Popup;
}(_react.PureComponent);

Popup.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  visible: _propTypes2.default.bool,
  mask: _propTypes2.default.bool,
  direction: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
  autoClose: _propTypes2.default.bool, // eslint-disable-line
  stayTime: _propTypes2.default.number, // eslint-disable-line
  animationDuration: _propTypes2.default.number,
  maskType: _Mask2.default.propTypes.type,
  onMaskClick: _Mask2.default.propTypes.onClose,
  onClose: _propTypes2.default.func
};

Popup.defaultProps = {
  prefixCls: 'za-popup',
  visible: false,
  mask: true,
  direction: 'bottom',
  autoClose: false,
  stayTime: 3000,
  animationDuration: 200,
  maskType: _Mask2.default.defaultProps.type,
  onMaskClick: _Mask2.default.defaultProps.onClose
};

exports.default = Popup;