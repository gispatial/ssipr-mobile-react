'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getChecked(props, defaultChecked) {
  if ('checked' in props && props.checked) {
    return props.checked;
  }
  if ('defaultChecked' in props && props.defaultChecked) {
    return props.defaultChecked;
  }
  return defaultChecked;
}

var Switch = function (_PureComponent) {
  _inherits(Switch, _PureComponent);

  function Switch(props) {
    _classCallCheck(this, Switch);

    var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

    _this.onValueChange = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onChange = _this$props.onChange;

      if (disabled) return;

      var checked = !_this.state.checked;
      _this.setState({ checked: checked });
      typeof onChange === 'function' && onChange(checked);
    };

    _this.state = {
      checked: getChecked(props, false)
    };
    return _this;
  }

  _createClass(Switch, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('checked' in nextProps) {
        this.setState({
          checked: !!nextProps.checked
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          className = _props.className,
          theme = _props.theme,
          disabled = _props.disabled;
      var checked = this.state.checked;


      var cls = (0, _classnames3.default)('' + prefixCls, className, (_classnames = {}, _defineProperty(_classnames, 'theme-' + theme, !!theme), _defineProperty(_classnames, 'checked', checked), _defineProperty(_classnames, 'disabled', disabled), _classnames));

      return _react2.default.createElement(
        'span',
        { className: cls },
        _react2.default.createElement('input', { type: 'checkbox', className: prefixCls + '-input', disabled: disabled, checked: checked, onChange: this.onValueChange })
      );
    }
  }]);

  return Switch;
}(_react.PureComponent);

Switch.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  theme: _propTypes2.default.oneOf(['default', 'primary', 'info', 'success', 'warning', 'error']),
  checked: _propTypes2.default.bool,
  defaultChecked: _propTypes2.default.bool, // eslint-disable-line
  disabled: _propTypes2.default.bool,
  onChange: _propTypes2.default.func
};

Switch.defaultProps = {
  prefixCls: 'za-switch',
  theme: 'primary',
  disabled: false
};

exports.default = Switch;