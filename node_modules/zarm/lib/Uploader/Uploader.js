'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _handleFileInfo = require('./utils/handleFileInfo');

var _handleFileInfo2 = _interopRequireDefault(_handleFileInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 设置选择前的方法，获取选择文件的相关信息，需要时可以对图片进行压缩、改变图片尺寸。
 *
 * multiple: 默认为 false，设置为 true 之后一次可以选择多张，onChange 事件调用之后返回一个数组，
 *           不设置或者设置为 false，onChange 事件调用之后返回一个对象。
 * disabled: 传递之后不可以点击上传，整个选择组件会设置为半透明状态，透明度为 0.5。
 * quality: 没有默认值，不设置不会进行压缩。
 * accept: 设置选择的文件类型，默认为所有类型，只有文件类型为图片（image/*）的时候会有本地预览图。
 * onChange: () => { file, fileType, fileSize, fileName, thumbnail }。
 * onBeforeSelect: () => boolean，返回 false 的时候阻止后续的选择事件。
 */
var Uploader = function (_PureComponent) {
  _inherits(Uploader, _PureComponent);

  function Uploader(props) {
    _classCallCheck(this, Uploader);

    var _this = _possibleConstructorReturn(this, (Uploader.__proto__ || Object.getPrototypeOf(Uploader)).call(this, props));

    _this.handleDefaultInput = function (e) {
      // 防止选择同一张图片两次造成 onChange 事件不触发
      e.target.value = null;

      var _this$props = _this.props,
          onBeforeSelect = _this$props.onBeforeSelect,
          disabled = _this$props.disabled;

      // 阻止 input onChange 默认事件

      if (onBeforeSelect() === false || disabled) {
        e.preventDefault();
      }
    };

    _this.handleClick = function () {
      _this.file.click();
    };

    _this.handleChange = function (e) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          quality = _this$props2.quality,
          multiple = _this$props2.multiple;

      var files = [].slice.call(e.target.files);
      var fileList = [];

      var getFileInfo = function getFileInfo(data) {
        if (multiple) {
          fileList.push(data);

          if (files.length === fileList.length) {
            typeof onChange === 'function' && onChange(fileList);
          }
        } else {
          typeof onChange === 'function' && onChange(data);
        }
      };

      files && files.map(function (file) {
        return (0, _handleFileInfo2.default)({ file: file, quality: quality }, getFileInfo);
      });
    };

    _this.state = {
      fileList: []
    };
    return _this;
  }

  _createClass(Uploader, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          className = _props.className,
          multiple = _props.multiple,
          accept = _props.accept,
          capture = _props.capture,
          disabled = _props.disabled,
          children = _props.children;


      var cls = (0, _classnames2.default)(prefixCls, _defineProperty({
        disabled: disabled
      }, className, !!className));

      return _react2.default.createElement(
        'div',
        { className: cls },
        _react2.default.createElement('input', {
          className: prefixCls + '-input',
          type: 'file',
          ref: function ref(ele) {
            _this2.file = ele;
          },
          accept: accept,
          multiple: multiple,
          capture: capture,
          onClick: this.handleDefaultInput,
          onChange: this.handleChange
        }),
        _react2.default.createElement('span', { className: prefixCls + '-trigger', onClick: this.handleClick }),
        children
      );
    }
  }]);

  return Uploader;
}(_react.PureComponent);

Uploader.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  multiple: _propTypes2.default.bool,
  quality: _propTypes2.default.number,
  accept: _propTypes2.default.string,
  capture: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  onBeforeSelect: _propTypes2.default.func
};

Uploader.defaultProps = {
  prefixCls: 'za-uploader',
  disabled: false,
  multiple: false,
  onBeforeSelect: function onBeforeSelect() {
    return true;
  }
};

exports.default = Uploader;