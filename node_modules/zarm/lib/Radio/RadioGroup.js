'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getChildChecked(children) {
  var checkedValue = null;
  _react2.default.Children.forEach(children, function (element) {
    if (element.props && element.props.checked) {
      checkedValue = element.props.value;
    }
  });
  return checkedValue;
}

function getValue(props, defaultValue) {
  if ('value' in props) {
    return props.value;
  }
  if ('defaultValue' in props) {
    return props.defaultValue;
  }
  if (getChildChecked(props.children)) {
    return getChildChecked(props.children);
  }
  return defaultValue;
}

var RadioGroup = function (_PureComponent) {
  _inherits(RadioGroup, _PureComponent);

  function RadioGroup(props) {
    _classCallCheck(this, RadioGroup);

    var _this = _possibleConstructorReturn(this, (RadioGroup.__proto__ || Object.getPrototypeOf(RadioGroup)).call(this, props));

    _this.onChildChange = function (value) {
      _this.setState({ value: value });
      var onChange = _this.props.onChange;

      typeof onChange === 'function' && onChange(value);
    };

    _this.state = {
      value: getValue(props, null)
    };
    return _this;
  }

  _createClass(RadioGroup, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps || getChildChecked(nextProps.children)) {
        this.setState({
          value: nextProps.value || getChildChecked(nextProps.children)
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this,
          _classnames;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          className = _props.className,
          theme = _props.theme,
          shape = _props.shape,
          type = _props.type,
          block = _props.block,
          disabled = _props.disabled,
          compact = _props.compact,
          children = _props.children;


      var items = _react2.default.Children.map(children, function (element, index) {
        return (0, _react.cloneElement)(element, {
          key: index,
          type: type,
          theme: theme,
          shape: shape,
          block: block || element.props.block,
          disabled: disabled || element.props.disabled,
          onChange: function onChange() {
            return _this2.onChildChange(element.props.value);
          },
          // use '==' because the result will fail when the value's typeof is Number
          checked: _this2.state.value == element.props.value // eslint-disable-line
        });
      });

      var cls = (0, _classnames3.default)('' + prefixCls, className, (_classnames = {}, _defineProperty(_classnames, 'shape-' + shape, !!shape), _defineProperty(_classnames, 'is-compact', compact), _defineProperty(_classnames, 'block', block), _defineProperty(_classnames, 'disabled', disabled), _classnames));

      return _react2.default.createElement(
        'div',
        { className: cls },
        items
      );
    }
  }]);

  return RadioGroup;
}(_react.PureComponent);

RadioGroup.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  theme: _propTypes2.default.oneOf(['default', 'primary', 'info', 'success', 'warning', 'error']),
  shape: _propTypes2.default.oneOf(['radius', 'round']),
  type: _propTypes2.default.oneOf(['button', 'cell']),
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]), // eslint-disable-line
  block: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  compact: _propTypes2.default.bool,
  onChange: _propTypes2.default.func
};

RadioGroup.defaultProps = {
  prefixCls: 'za-radio-group',
  theme: 'primary',
  block: false,
  disabled: false,
  compact: false
};

exports.default = RadioGroup;