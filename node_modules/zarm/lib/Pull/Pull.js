'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

var _events = require('../utils/events');

var _events2 = _interopRequireDefault(_events);

var _Drag = require('../Drag');

var _Drag2 = _interopRequireDefault(_Drag);

var _Spinner = require('../Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var REFRESH_STATE = {
  normal: 0, // 普通
  pull: 1, // 下拉状态（未满足刷新条件）
  drop: 2, // 释放立即刷新（满足刷新条件）
  loading: 3, // 加载中
  success: 4, // 加载成功
  failure: 5 // 加载失败
};

var LOAD_STATE = {
  normal: 0, // 普通
  abort: 1, // 中止
  loading: 2, // 加载中
  success: 3, // 加载成功
  failure: 4, // 加载失败
  complete: 5 // 加载完成（无新数据）
};

var Pull = function (_PureComponent) {
  _inherits(Pull, _PureComponent);

  function Pull(props) {
    _classCallCheck(this, Pull);

    var _this = _possibleConstructorReturn(this, (Pull.__proto__ || Object.getPrototypeOf(Pull)).call(this, props));

    _this.onScroll = function () {
      var _this$state = _this.state,
          refreshState = _this$state.refreshState,
          loadState = _this$state.loadState;

      if (refreshState !== REFRESH_STATE.normal) return;
      if (loadState !== LOAD_STATE.normal) return;

      var _this$props = _this.props,
          onLoad = _this$props.onLoad,
          loadDistance = _this$props.loadDistance;

      if (!onLoad) return;

      var bottom = _this.pull.getBoundingClientRect().bottom;
      var scrollHeight = document.documentElement.scrollHeight;
      var clientHeight = document.documentElement.clientHeight;

      if (scrollHeight <= clientHeight) return;

      if (bottom <= clientHeight + loadDistance) {
        typeof onLoad === 'function' && onLoad();
      }
    };

    _this.onDragMove = function (event, _ref) {
      var offsetY = _ref.offsetY;

      // 未设置刷新事件
      var onRefresh = _this.props.onRefresh;

      if (!onRefresh) return;

      // 上拉
      if (offsetY < 0) return;

      // 未滚动到顶部
      if (offsetY > 0 && document.documentElement.scrollTop + document.body.scrollTop > 0) return;

      // 已经触发过加载状态
      if (_this.state.refreshState >= REFRESH_STATE.loading) return;

      // 解决低端安卓系统只触发一次touchmove事件的bug
      event.preventDefault();

      var _this$props2 = _this.props,
          refreshDistance = _this$props2.refreshDistance,
          refreshInitDistance = _this$props2.refreshInitDistance;

      var offset = offsetY / 2; // 移动距离为拖动距离的一半

      // 判断是否达到释放立即刷新的条件
      var action = offset - refreshInitDistance < refreshDistance ? REFRESH_STATE.pull : REFRESH_STATE.drop;

      _this.doRefreshAction(action, offset);
      return true;
    };

    _this.onDragEnd = function (event, _ref2) {
      var offsetY = _ref2.offsetY;
      var onRefresh = _this.props.onRefresh;
      var refreshState = _this.state.refreshState;

      // 没有产生位移

      if (!offsetY) return;

      // 当前状态为下拉状态时
      if (refreshState === REFRESH_STATE.pull) {
        _this.doRefreshAction(REFRESH_STATE.normal);
        return;
      }

      // 执行外部触发刷新的回调
      typeof onRefresh === 'function' && onRefresh();
    };

    _this.doTransition = function (_ref3) {
      var offsetY = _ref3.offsetY,
          animationDuration = _ref3.animationDuration;

      _this.setState({ offsetY: offsetY, animationDuration: animationDuration });
    };

    _this.doRefreshAction = function (refreshState, offsetY) {
      var _this$props3 = _this.props,
          animationDuration = _this$props3.animationDuration,
          stayTime = _this$props3.stayTime;


      _this.setState({ refreshState: refreshState });
      switch (refreshState) {
        case REFRESH_STATE.pull:
        case REFRESH_STATE.drop:
          _this.doTransition({ offsetY: offsetY, animationDuration: 0 });
          break;

        case REFRESH_STATE.loading:
          _this.doTransition({ offsetY: 'auto', animationDuration: animationDuration });
          break;

        case REFRESH_STATE.success:
        case REFRESH_STATE.failure:
          _this.doTransition({ offsetY: 'auto', animationDuration: animationDuration });
          setTimeout(function () {
            _this.doRefreshAction(REFRESH_STATE.normal);
            _this.doLoadAction(LOAD_STATE.normal);
          }, stayTime);
          break;

        default:
          _this.doTransition({ offsetY: 0, animationDuration: animationDuration });
      }
    };

    _this.doLoadAction = function (loadState) {
      var stayTime = _this.props.stayTime;

      _this.setState({ loadState: loadState });

      switch (loadState) {
        case LOAD_STATE.success:
          _this.doLoadAction(LOAD_STATE.normal);
          break;

        case LOAD_STATE.failure:
          setTimeout(function () {
            _this.doLoadAction(LOAD_STATE.abort);
          }, stayTime);
          break;
      }
    };

    _this.renderRefresh = function () {
      var _this$props4 = _this.props,
          prefixCls = _this$props4.prefixCls,
          refreshInitDistance = _this$props4.refreshInitDistance,
          refreshDistance = _this$props4.refreshDistance,
          refreshRender = _this$props4.refreshRender;
      var _this$state2 = _this.state,
          refreshState = _this$state2.refreshState,
          offsetY = _this$state2.offsetY;


      var percent = 0;
      if (offsetY >= refreshInitDistance) {
        percent = (offsetY - refreshInitDistance < refreshDistance ? offsetY - refreshInitDistance : refreshDistance) * 100 / refreshDistance;
      }

      if (typeof refreshRender === 'function') {
        return refreshRender(refreshState, percent);
      }

      var cls = prefixCls + '-control';

      switch (refreshState) {
        case REFRESH_STATE.pull:
          return _react2.default.createElement(
            'div',
            { className: cls },
            _react2.default.createElement(_Spinner2.default, { percent: percent }),
            _react2.default.createElement(
              'span',
              null,
              '\u4E0B\u62C9\u5237\u65B0'
            )
          );

        case REFRESH_STATE.drop:
          return _react2.default.createElement(
            'div',
            { className: cls },
            _react2.default.createElement(_Spinner2.default, { percent: 100 }),
            _react2.default.createElement(
              'span',
              null,
              '\u91CA\u653E\u7ACB\u5373\u5237\u65B0'
            )
          );

        case REFRESH_STATE.loading:
          return _react2.default.createElement(
            'div',
            { className: cls },
            _react2.default.createElement(_Spinner2.default, { className: 'rotate360' }),
            _react2.default.createElement(
              'span',
              null,
              '\u52A0\u8F7D\u4E2D'
            )
          );

        case REFRESH_STATE.success:
          return _react2.default.createElement(
            'div',
            { className: cls },
            _react2.default.createElement(_Icon2.default, { type: 'right-round', theme: 'success' }),
            _react2.default.createElement(
              'span',
              null,
              '\u52A0\u8F7D\u6210\u529F'
            )
          );

        case REFRESH_STATE.failure:
          return _react2.default.createElement(
            'div',
            { className: cls },
            _react2.default.createElement(_Icon2.default, { type: 'wrong-round', theme: 'error' }),
            _react2.default.createElement(
              'span',
              null,
              '\u52A0\u8F7D\u5931\u8D25'
            )
          );
      }
    };

    _this.renderLoad = function () {
      var _this$props5 = _this.props,
          prefixCls = _this$props5.prefixCls,
          loadRender = _this$props5.loadRender;
      var loadState = _this.state.loadState;


      if (typeof loadRender === 'function') {
        return loadRender(loadState);
      }

      var cls = prefixCls + '-control';

      switch (loadState) {
        case LOAD_STATE.loading:
          return _react2.default.createElement(
            'div',
            { className: cls },
            _react2.default.createElement(_Spinner2.default, { className: 'rotate360' }),
            _react2.default.createElement(
              'span',
              null,
              '\u52A0\u8F7D\u4E2D'
            )
          );

        case LOAD_STATE.failure:
          return _react2.default.createElement(
            'div',
            { className: cls },
            _react2.default.createElement(_Icon2.default, { type: 'wrong-round', theme: 'error' }),
            _react2.default.createElement(
              'span',
              null,
              '\u52A0\u8F7D\u5931\u8D25'
            )
          );

        case LOAD_STATE.complete:
          return _react2.default.createElement(
            'div',
            { className: cls },
            _react2.default.createElement(
              'span',
              null,
              '\u6211\u662F\u6709\u5E95\u7EBF\u7684'
            )
          );
      }
    };

    _this.state = {
      offsetY: 0,
      animationDuration: 0,
      refreshState: props.refreshing,
      loadState: props.loading
    };
    return _this;
  }

  _createClass(Pull, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _events2.default.on(window, 'scroll', this.onScroll);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('refreshing' in nextProps && nextProps.refreshing !== this.props.refreshing) {
        this.doRefreshAction(nextProps.refreshing);
      }

      if ('loading' in nextProps && nextProps.loading !== this.props.loading) {
        this.doLoadAction(nextProps.loading);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _events2.default.off(window, 'scroll', this.onScroll);
    }

    /**
     * 执行动画
     * @param  {number} options.offsetY  偏移距离
     * @param  {number} options.animationDuration 动画执行时间
     */


    /**
     * 执行刷新动作
     * @param  {REFRESH_STATE} refreshState 刷新状态
     * @param  {number}        offsetY      偏移距离
     */


    /**
     * 执行加载动作
     * @param  {LOAD_STATE} loadState 加载状态
     */


    /**
     * 渲染刷新节点
     */


    /**
     * 渲染加载节点
     */

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          className = _props.className,
          children = _props.children;
      var _state = this.state,
          offsetY = _state.offsetY,
          animationDuration = _state.animationDuration,
          refreshState = _state.refreshState,
          loadState = _state.loadState;

      var cls = (0, _classnames4.default)('' + prefixCls, className);

      var refreshCls = (0, _classnames4.default)(prefixCls + '-refresh', _defineProperty({}, prefixCls + '-refresh-show', refreshState >= REFRESH_STATE.loading));

      var loadCls = (0, _classnames4.default)(prefixCls + '-load', _defineProperty({}, prefixCls + '-load-show', loadState >= LOAD_STATE.loading));

      var refreshStyle = {
        WebkitTransitionDuration: animationDuration + 'ms',
        transitionDuration: animationDuration + 'ms'
      };

      if (refreshState <= REFRESH_STATE.drop) {
        refreshStyle.height = offsetY;
      }

      return _react2.default.createElement(
        _Drag2.default,
        {
          onDragMove: this.onDragMove,
          onDragEnd: this.onDragEnd },
        _react2.default.createElement(
          'div',
          { className: cls, ref: function ref(ele) {
              _this2.pull = ele;
            } },
          _react2.default.createElement(
            'div',
            { className: refreshCls, style: refreshStyle },
            this.renderRefresh()
          ),
          children,
          _react2.default.createElement(
            'div',
            { className: loadCls },
            this.renderLoad()
          )
        )
      );
    }
  }]);

  return Pull;
}(_react.PureComponent);

Pull.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  refreshing: _propTypes2.default.number,
  refreshInitDistance: _propTypes2.default.number,
  refreshDistance: _propTypes2.default.number,
  refreshRender: _propTypes2.default.func,
  onRefresh: _propTypes2.default.func,
  loading: _propTypes2.default.number,
  loadDistance: _propTypes2.default.number,
  onLoad: _propTypes2.default.func,
  loadRender: _propTypes2.default.func,
  animationDuration: _propTypes2.default.number,
  stayTime: _propTypes2.default.number
};

Pull.defaultProps = {
  prefixCls: 'za-pull',
  refreshing: REFRESH_STATE.normal,
  refreshInitDistance: 30,
  refreshDistance: 50,
  loading: LOAD_STATE.normal,
  loadDistance: 10,
  animationDuration: 400,
  stayTime: 1000
};

exports.default = Pull;