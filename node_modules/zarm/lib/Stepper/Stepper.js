'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getValue(props, defaultValue) {
  if ('value' in props) {
    return props.value;
  }
  if ('defaultValue' in props) {
    return props.defaultValue;
  }
  return defaultValue;
}

var Stepper = function (_PureComponent) {
  _inherits(Stepper, _PureComponent);

  function Stepper(props) {
    _classCallCheck(this, Stepper);

    var _this = _possibleConstructorReturn(this, (Stepper.__proto__ || Object.getPrototypeOf(Stepper)).call(this, props));

    _this.onInputChange = function (value) {
      value = Number(value);
      var onInputChange = _this.props.onInputChange;

      _this.setState({ value: value });
      typeof onInputChange === 'function' && onInputChange(value);
    };

    _this.onInputBlur = function (value) {
      var _this$props = _this.props,
          min = _this$props.min,
          max = _this$props.max,
          onChange = _this$props.onChange;

      value = Number(value);
      if (value === '' || isNaN(value)) {
        value = _this.state.lastValue;
      }
      if (min !== null && value < min) {
        value = min;
      }
      if (max !== null && value > max) {
        value = max;
      }
      _this.setState({
        value: value,
        lastValue: value
      });
      typeof onChange === 'function' && onChange(value);
    };

    _this.onSubClick = function () {
      var step = _this.props.step;

      var value = Number(_this.state.value) - step;
      _this.onInputBlur(value);
    };

    _this.onPlusClick = function () {
      var step = _this.props.step;

      var value = Number(_this.state.value) + step;
      _this.onInputBlur(value);
    };

    _this.state = {
      value: getValue(props, 0),
      lastValue: getValue(props, 0)
    };
    return _this;
  }

  _createClass(Stepper, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: Number(getValue(nextProps, 0)),
          lastValue: Number(getValue(nextProps, 0))
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames,
          _this2 = this;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          className = _props.className,
          theme = _props.theme,
          size = _props.size,
          shape = _props.shape,
          disabled = _props.disabled,
          min = _props.min,
          max = _props.max;
      var value = this.state.value;


      var cls = (0, _classnames3.default)('' + prefixCls, className, (_classnames = {}, _defineProperty(_classnames, 'theme-' + theme, !!theme), _defineProperty(_classnames, 'size-' + size, !!size), _defineProperty(_classnames, 'shape-' + shape, !!shape), _defineProperty(_classnames, 'disabled', disabled), _classnames));

      var subDisabled = !!(typeof min === 'number' && value <= min) || disabled;
      var plusDisabled = !!(typeof max === 'number' && value >= max) || disabled;

      var subCls = (0, _classnames3.default)(prefixCls + '-sub', {
        disabled: subDisabled
      });

      var plusCls = (0, _classnames3.default)(prefixCls + '-plus', {
        disabled: plusDisabled
      });

      return _react2.default.createElement(
        'span',
        { className: cls },
        _react2.default.createElement(
          'span',
          { className: subCls, onClick: !subDisabled && this.onSubClick },
          _react2.default.createElement(_Icon2.default, { type: 'minus' })
        ),
        _react2.default.createElement('input', { className: prefixCls + '-body', type: 'tel', value: value, onChange: function onChange(e) {
            return _this2.onInputChange(e.target.value);
          }, onBlur: function onBlur(e) {
            return _this2.onInputBlur(e.target.value);
          } }),
        _react2.default.createElement(
          'span',
          { className: plusCls, onClick: !plusDisabled && this.onPlusClick },
          _react2.default.createElement(_Icon2.default, { type: 'add' })
        )
      );
    }
  }]);

  return Stepper;
}(_react.PureComponent);

Stepper.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  theme: _propTypes2.default.oneOf(['default', 'primary', 'info', 'success', 'warning', 'error']),
  size: _propTypes2.default.oneOf(['xl', 'lg', 'sm', 'xs']),
  shape: _propTypes2.default.oneOf(['radius', 'circle']),
  value: _propTypes2.default.number, // eslint-disable-line
  defaultValue: _propTypes2.default.number, // eslint-disable-line
  disabled: _propTypes2.default.bool,
  step: _propTypes2.default.number,
  min: _propTypes2.default.number,
  max: _propTypes2.default.number,
  onInputChange: _propTypes2.default.func,
  onChange: _propTypes2.default.func
};

Stepper.defaultProps = {
  prefixCls: 'za-stepper',
  theme: 'primary',
  disabled: false,
  step: 1
};

exports.default = Stepper;