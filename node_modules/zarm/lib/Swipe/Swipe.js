'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _events = require('../utils/events');

var _events2 = _interopRequireDefault(_events);

var _Drag = require('../Drag');

var _Drag2 = _interopRequireDefault(_Drag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Swipe = function (_Component) {
  _inherits(Swipe, _Component);

  function Swipe(props) {
    _classCallCheck(this, Swipe);

    var _this = _possibleConstructorReturn(this, (Swipe.__proto__ || Object.getPrototypeOf(Swipe)).call(this, props));

    _initialiseProps.call(_this);

    _this.dragState = {};
    _this.scrolling = false;
    _this.translateX = 0;
    _this.translateY = 0;
    _this.moveInterval = null;
    _this.state = {
      items: [],
      activeIndex: props.activeIndex
    };
    return _this;
  }

  _createClass(Swipe, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.parseItems(this.props);
      this.startAutoPlay(this.props);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      // 监听窗口变化
      _events2.default.on(window, 'resize', this.resize);
      _events2.default.on(this.swipeItems, 'webkitTransitionEnd', this.transitionEnd);
      _events2.default.on(this.swipeItems, 'transitionend', this.transitionEnd);

      // 设置起始位置编号
      this.onJumpTo(this.props.activeIndex);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('children' in nextProps) {
        this.parseItems(nextProps);
      }

      if ('activeIndex' in nextProps) {
        this.onJumpTo(nextProps.activeIndex);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      // 自动轮播结束
      this.pauseAutoPlay();

      // 移除监听窗口变化
      _events2.default.off(window, 'resize', this.resize);
      _events2.default.off(this.swipeItems, 'webkitTransitionEnd', this.transitionEnd);
      _events2.default.off(this.swipeItems, 'transitionend', this.transitionEnd);
    }

    // 滑动到指定编号


    // 静默跳到指定编号


    // 移动到指定编号


    // 触屏事件


    // 自动轮播开始


    // 暂停自动轮播


    // 处理节点（首位拼接）


    // 更新窗口变化的位置偏移


    // 执行过渡动画


    // 判断当前是否在最后一页


    // 判断当前是否在第一页


    // 是否横向移动

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          className = _props.className,
          height = _props.height,
          showPagination = _props.showPagination,
          children = _props.children;

      var cls = (0, _classnames3.default)('' + prefixCls, className);
      var style = {
        items: {},
        pagination: {}
      };

      if (!this.isDirectionX()) {
        style.items.height = height;
      } else {
        style.items.whiteSpace = 'nowrap';
        style.pagination.display = 'inline-block';
      }

      return _react2.default.createElement(
        'div',
        { className: cls },
        _react2.default.createElement(
          _Drag2.default,
          {
            onDragStart: this.onDragStart,
            onDragMove: this.onDragMove,
            onDragEnd: this.onDragEnd },
          _react2.default.createElement(
            'div',
            {
              ref: function ref(ele) {
                _this2.swipeItems = ele;
              },
              className: prefixCls + '-items',
              style: style.items },
            this.state.items
          )
        ),
        showPagination && _react2.default.createElement(
          'div',
          { className: prefixCls + '-pagination' },
          _react2.default.createElement(
            'ul',
            null,
            _react.Children.map(children, function (result, index) {
              return _react2.default.createElement('li', {
                role: 'tab',
                key: 'pagination-' + index,
                className: (0, _classnames3.default)({ active: index === _this2.state.activeIndex }),
                style: style.pagination,
                onClick: function onClick() {
                  return _this2.onSlideTo(index);
                }
              });
            })
          )
        )
      );
    }
  }]);

  return Swipe;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.onSlideTo = function (index) {
    _this3.onMoveTo(index, _this3.props.animationDuration);
  };

  this.onJumpTo = function (index) {
    _this3.onMoveTo(index, 0);
  };

  this.onMoveTo = function (index, animationDuration) {
    var dom = _this3.swipeItems;
    if (!dom) return;

    _this3.translateX = -dom.offsetWidth * (index + _this3.props.loop);
    _this3.translateY = -dom.offsetHeight * (index + _this3.props.loop);
    _this3.doTransition({ x: _this3.translateX, y: _this3.translateY }, animationDuration);

    var maxLength = _this3.props.children.length;
    if (index > maxLength - 1) {
      index = 0;
    } else if (index < 0) {
      index = maxLength - 1;
    }
    _this3.setState({
      activeIndex: index
    });
  };

  this.onDragStart = function () {
    _this3.scrolling = false;

    // 跳转到头尾
    var activeIndex = _this3.state.activeIndex;
    var maxLength = _this3.props.children.length;

    if (activeIndex <= 0) {
      _this3.onJumpTo(0);
    } else if (activeIndex >= maxLength - 1) {
      _this3.onJumpTo(maxLength - 1);
    }

    // 暂停自动轮播
    _this3.pauseAutoPlay();
  };

  this.onDragMove = function (event, _ref) {
    var offsetX = _ref.offsetX,
        offsetY = _ref.offsetY;

    var distanceX = Math.abs(offsetX);
    var distanceY = Math.abs(offsetY);

    if (_this3.isDirectionX() && (distanceX < 5 || distanceX >= 5 && distanceY >= 1.73 * distanceX)) {
      _this3.scrolling = true;
      return false;
    }

    if (!_this3.isDirectionX() && (distanceY < 5 || distanceY >= 5 && distanceX >= 1.73 * distanceY)) {
      _this3.scrolling = true;
      return false;
    }

    // 设置不循环的时候
    if (!_this3.props.loop) {
      // 在首页时禁止拖动
      if (_this3.isLastIndex()) {
        if (_this3.isDirectionX() && offsetX < 0) return false;
        if (!_this3.isDirectionX() && offsetY < 0) return false;
      }

      // 在尾页时禁止拖动
      if (_this3.isFirstIndex()) {
        if (_this3.isDirectionX() && offsetX > 0) return false;
        if (!_this3.isDirectionX() && offsetY > 0) return false;
      }
    }

    _this3.scrolling = false;
    event.preventDefault();

    _this3.doTransition({ x: _this3.translateX + offsetX, y: _this3.translateY + offsetY }, 0);
    return true;
  };

  this.onDragEnd = function (_event, _ref2) {
    var offsetX = _ref2.offsetX,
        offsetY = _ref2.offsetY,
        startTime = _ref2.startTime;

    if (_this3.scrolling) {
      return;
    }
    if (!offsetX && !offsetY) {
      return;
    }

    var _props2 = _this3.props,
        _props2$moveDistanceR = _props2.moveDistanceRatio,
        moveDistanceRatio = _props2$moveDistanceR === undefined ? Swipe.defaultProps.moveDistanceRatio : _props2$moveDistanceR,
        _props2$moveTimeSpan = _props2.moveTimeSpan,
        moveTimeSpan = _props2$moveTimeSpan === undefined ? Swipe.defaultProps.moveTimeSpan : _props2$moveTimeSpan,
        onChange = _props2.onChange;
    var activeIndex = _this3.state.activeIndex;


    var dom = _this3.swipeItems;
    var timeSpan = new Date().getTime() - startTime.getTime();
    var ratio = _this3.isDirectionX() ? Math.abs(offsetX / dom.offsetWidth) : Math.abs(offsetY / dom.offsetHeight);

    // 判断滑动临界点
    // 1.滑动距离超过0，且滑动距离和父容器长度之比超过moveDistanceRatio
    // 2.滑动释放时间差低于moveTimeSpan
    if (ratio >= moveDistanceRatio || timeSpan <= moveTimeSpan) {
      var op = !(_this3.isDirectionX() && offsetX > 0 || !_this3.isDirectionX() && offsetY > 0);

      if (typeof onChange === 'function') {
        onChange(_this3.parseActiveIndexParse(op));
      }

      activeIndex = op ? activeIndex + 1 : activeIndex - 1;
    }

    _this3.onSlideTo(activeIndex);

    // 恢复自动轮播
    _this3.startAutoPlay();
  };

  this.parseActiveIndexParse = function (op) {
    var _props3 = _this3.props,
        loop = _props3.loop,
        children = _props3.children;

    var maxIndex = children.length - 1;
    var activeIndex = _this3.state.activeIndex;


    if (op) {
      // eslint-disable-next-line
      activeIndex = activeIndex + 1 > maxIndex ? loop ? 0 : maxIndex : activeIndex += 1;
    } else {
      // eslint-disable-next-line
      activeIndex = activeIndex - 1 < 0 ? loop ? maxIndex : 0 : activeIndex -= 1;
    }
    return activeIndex;
  };

  this.startAutoPlay = function () {
    var _props4 = _this3.props,
        direction = _props4.direction,
        loop = _props4.loop,
        autoPlay = _props4.autoPlay,
        autoPlayIntervalTime = _props4.autoPlayIntervalTime,
        children = _props4.children;


    _this3.moveInterval = autoPlay && setInterval(function () {
      var activeIndex = _this3.state.activeIndex;
      var maxLength = children.length;

      activeIndex = ['left', 'top'].indexOf(direction) > -1 ? activeIndex + 1 : activeIndex - 1;

      // 不循环暂停轮播
      if (!loop && activeIndex > maxLength - 1) {
        _this3.pauseAutoPlay();
        return;
      }
      _this3.onSlideTo(activeIndex);
    }, autoPlayIntervalTime);
  };

  this.pauseAutoPlay = function () {
    if (_this3.moveInterval) {
      clearInterval(_this3.moveInterval);
    }
  };

  this.parseItems = function (props) {
    if (props.children.length === 0) {
      return;
    }

    // 增加头尾拼接节点
    var items = [].concat(props.children);
    var firstItem = items[0];
    var lastItem = items[items.length - 1];

    if (props.loop) {
      items.push(firstItem);
      items.unshift(lastItem);
    }

    // 节点追加后重排key
    var newItems = _react2.default.Children.map(items, function (element, index) {
      var _classnames;

      return (0, _react.cloneElement)(element, {
        key: index,
        className: (0, _classnames3.default)((_classnames = {}, _defineProperty(_classnames, props.prefixCls + '-item', true), _defineProperty(_classnames, element.props.className, !!element.props.className), _classnames))
      });
    });

    _this3.setState({
      items: newItems
    });
  };

  this.resize = function () {
    _this3.onJumpTo(_this3.state.activeIndex);
  };

  this.doTransition = function (offset, animationDuration) {
    var dom = _this3.swipeItems;
    var x = 0;
    var y = 0;

    if (_this3.isDirectionX()) {
      x = offset.x;
    } else {
      y = offset.y;
    }

    dom.style.webkitTransitionDuration = animationDuration + 'ms';
    dom.style.transitionDuration = animationDuration + 'ms';
    dom.style.webkitTransform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';
    dom.style.transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';
  };

  this.transitionEnd = function () {
    var activeIndex = _this3.state.activeIndex;
    var dom = _this3.swipeItems;
    _this3.translateX = -dom.offsetWidth * (activeIndex + _this3.props.loop);
    _this3.translateY = -dom.offsetHeight * (activeIndex + _this3.props.loop);
    _this3.doTransition({ x: _this3.translateX, y: _this3.translateY }, 0);

    var onChangeEnd = _this3.props.onChangeEnd;

    typeof onChangeEnd === 'function' && onChangeEnd(_this3.state.activeIndex);
  };

  this.isLastIndex = function () {
    return _this3.state.activeIndex >= _this3.props.children.length - 1;
  };

  this.isFirstIndex = function () {
    return _this3.state.activeIndex <= 0;
  };

  this.isDirectionX = function () {
    return ['left', 'right'].indexOf(_this3.props.direction) > -1;
  };
};

Swipe.propTypes = {
  prefixCls: _propTypes2.default.string,
  className: _propTypes2.default.string,
  direction: _propTypes2.default.oneOf(['left', 'right', 'top', 'bottom']),
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  loop: _propTypes2.default.bool,
  activeIndex: _propTypes2.default.number,
  animationDuration: _propTypes2.default.number,
  autoPlay: _propTypes2.default.bool,
  autoPlayIntervalTime: _propTypes2.default.number,
  moveDistanceRatio: _propTypes2.default.number,
  moveTimeSpan: _propTypes2.default.number,
  showPagination: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  onChangeEnd: _propTypes2.default.func
};

Swipe.defaultProps = {
  prefixCls: 'za-swipe',
  direction: 'left',
  height: 160,
  loop: false,
  activeIndex: 0,
  animationDuration: 300,
  autoPlay: false,
  autoPlayIntervalTime: 3000,
  moveDistanceRatio: 0.5,
  moveTimeSpan: 300,
  showPagination: true
};

exports.default = Swipe;