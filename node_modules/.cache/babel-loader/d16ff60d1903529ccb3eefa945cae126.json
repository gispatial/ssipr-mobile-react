{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Crocslut/Desktop/STT/ssipr-proto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Crocslut/Desktop/STT/ssipr-proto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/Crocslut/Desktop/STT/ssipr-proto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { errorMessages } from '../constants/messages';\nimport { Firebase, FirebaseRef } from '../lib/firebase';\nexport default {\n  state: {},\n  // initial state\n\n  /**\n   * Reducers\n   */\n  reducers: {\n    setUserLogin: function setUserLogin(state, payload) {\n      var uid = payload.uid,\n          email = payload.email,\n          emailVerified = payload.emailVerified;\n      return _objectSpread({}, state, {\n        uid: uid,\n        email: email,\n        emailVerified: emailVerified\n      });\n    },\n    setUserDetails: function setUserDetails(state, payload) {\n      var firstName = payload.firstName,\n          lastName = payload.lastName,\n          signedUp = payload.signedUp,\n          role = payload.role;\n      return _objectSpread({}, state, {\n        firstName: firstName,\n        lastName: lastName,\n        signedUp: signedUp,\n        role: role\n      });\n    },\n    resetUser: function resetUser() {\n      return {};\n    }\n  },\n\n  /**\n   * Effects/Actions\n   */\n  effects: function effects(dispatch) {\n    return {\n      /**\n       * Sign Up\n       *\n       * @param {obj} formData - data from form\n       * @return {Promise}\n       */\n      signUp: function signUp(formData) {\n        var email = formData.email,\n            password = formData.password,\n            password2 = formData.password2,\n            firstName = formData.firstName,\n            lastName = formData.lastName;\n        return new Promise(\n        /*#__PURE__*/\n        function () {\n          var _ref = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(resolve, reject) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (firstName) {\n                      _context.next = 2;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", reject({\n                      message: errorMessages.missingFirstName\n                    }));\n\n                  case 2:\n                    if (lastName) {\n                      _context.next = 4;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", reject({\n                      message: errorMessages.missingLastName\n                    }));\n\n                  case 4:\n                    if (email) {\n                      _context.next = 6;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", reject({\n                      message: errorMessages.missingEmail\n                    }));\n\n                  case 6:\n                    if (password) {\n                      _context.next = 8;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", reject({\n                      message: errorMessages.missingPassword\n                    }));\n\n                  case 8:\n                    if (password2) {\n                      _context.next = 10;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", reject({\n                      message: errorMessages.missingPassword\n                    }));\n\n                  case 10:\n                    if (!(password !== password2)) {\n                      _context.next = 12;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", reject({\n                      message: errorMessages.passwordsDontMatch\n                    }));\n\n                  case 12:\n                    return _context.abrupt(\"return\", Firebase.auth().createUserWithEmailAndPassword(email, password).then(function (res) {\n                      // Send user details to Firebase database\n                      if (res && res.user.uid) {\n                        FirebaseRef.child(\"users/\".concat(res.user.uid)).set({\n                          firstName: firstName,\n                          lastName: lastName,\n                          signedUp: Firebase.database.ServerValue.TIMESTAMP,\n                          lastLoggedIn: Firebase.database.ServerValue.TIMESTAMP\n                        }).then(resolve);\n                      }\n                    }).catch(reject));\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          throw err.message;\n        });\n      },\n\n      /**\n       * Listen for realtime updates on the current user\n       */\n      listenForMemberProfileUpdates: function listenForMemberProfileUpdates() {\n        var _this = this;\n\n        var UID = FirebaseRef && Firebase && Firebase.auth() && Firebase.auth().currentUser && Firebase.auth().currentUser.uid ? Firebase.auth().currentUser.uid : null;\n        if (!UID) return false;\n        var ref = FirebaseRef.child(\"users/\".concat(UID));\n        return ref.on('value', function (snapshot) {\n          var userData = snapshot.val() || [];\n\n          _this.setUserDetails(userData); // Send to reducer\n\n        });\n      },\n\n      /**\n       * Get the current Member's Details\n       *\n       * @returns {Promise}\n       */\n      getMemberData: function getMemberData() {\n        var _this2 = this;\n\n        if (Firebase === null) return new Promise(function (resolve) {\n          return resolve;\n        }); // Ensure token is up to date\n\n        return new Promise(function (resolve) {\n          Firebase.auth().onAuthStateChanged(function (loggedIn) {\n            if (loggedIn) {\n              _this2.listenForMemberProfileUpdates(dispatch);\n\n              return resolve();\n            }\n\n            return new Promise(function () {\n              return resolve;\n            });\n          });\n        });\n      },\n\n      /**\n       * Login to Firebase with Email/Password\n       *\n       * @param {obj} formData - data from form\n       * @return {Promise}\n       */\n      login: function login(formData) {\n        var _this3 = this;\n\n        var email = formData.email,\n            password = formData.password;\n        return new Promise(\n        /*#__PURE__*/\n        function () {\n          var _ref2 = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee3(resolve, reject) {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    if (!(!email || email.length === 0)) {\n                      _context3.next = 2;\n                      break;\n                    }\n\n                    return _context3.abrupt(\"return\", reject({\n                      message: errorMessages.missingEmail\n                    }));\n\n                  case 2:\n                    if (!(!password || password.length === 0)) {\n                      _context3.next = 4;\n                      break;\n                    }\n\n                    return _context3.abrupt(\"return\", reject({\n                      message: errorMessages.missingPassword\n                    }));\n\n                  case 4:\n                    return _context3.abrupt(\"return\", Firebase.auth().setPersistence(Firebase.auth.Auth.Persistence.LOCAL).then(function () {\n                      return Firebase.auth().signInWithEmailAndPassword(email, password).then(\n                      /*#__PURE__*/\n                      function () {\n                        var _ref3 = _asyncToGenerator(\n                        /*#__PURE__*/\n                        _regeneratorRuntime.mark(function _callee2(res) {\n                          var userDetails;\n                          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  userDetails = res && res.user ? res.user : null; // Save the user's login data (email, UID)\n\n                                  _this3.setUserLogin(userDetails); // Update last logged in data\n\n\n                                  if (userDetails.uid) {\n                                    FirebaseRef.child(\"users/\".concat(userDetails.uid)).update({\n                                      lastLoggedIn: Firebase.database.ServerValue.TIMESTAMP\n                                    }); // Send verification Email when email hasn't been verified\n\n                                    if (userDetails.emailVerified === false) {\n                                      Firebase.auth().currentUser.sendEmailVerification().catch(function () {\n                                        return console.log('Verification email failed to send');\n                                      });\n                                    } // Get/Save User Profile (name, signed up date etc)\n\n\n                                    _this3.listenForMemberProfileUpdates(dispatch);\n                                  }\n\n                                  return _context2.abrupt(\"return\", resolve());\n\n                                case 4:\n                                case \"end\":\n                                  return _context2.stop();\n                              }\n                            }\n                          }, _callee2);\n                        }));\n\n                        return function (_x5) {\n                          return _ref3.apply(this, arguments);\n                        };\n                      }()).catch(reject);\n                    }));\n\n                  case 5:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          return function (_x3, _x4) {\n            return _ref2.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          throw err.message;\n        });\n      },\n\n      /**\n       * Reset Password\n       *\n       * @param {obj} formData - data from form\n       * @return {Promise}\n       */\n      resetPassword: function resetPassword(formData) {\n        var _this4 = this;\n\n        var email = formData.email;\n        return new Promise(\n        /*#__PURE__*/\n        function () {\n          var _ref4 = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee4(resolve, reject) {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    if (email) {\n                      _context4.next = 2;\n                      break;\n                    }\n\n                    return _context4.abrupt(\"return\", reject({\n                      message: errorMessages.missingEmail\n                    }));\n\n                  case 2:\n                    return _context4.abrupt(\"return\", Firebase.auth().sendPasswordResetEmail(email).then(function () {\n                      _this4.resetUser();\n\n                      resolve();\n                    }).catch(reject));\n\n                  case 3:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n          return function (_x6, _x7) {\n            return _ref4.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          throw err.message;\n        });\n      },\n\n      /**\n       * Update Profile\n       *\n       * @param {obj} formData - data from form\n       * @return {Promise}\n       */\n      updateProfile: function updateProfile(formData) {\n        var email = formData.email,\n            password = formData.password,\n            password2 = formData.password2,\n            firstName = formData.firstName,\n            lastName = formData.lastName,\n            changeEmail = formData.changeEmail,\n            changePassword = formData.changePassword;\n        return new Promise(\n        /*#__PURE__*/\n        function () {\n          var _ref5 = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee6(resolve, reject) {\n            var UID;\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return Firebase.auth().currentUser.uid;\n\n                  case 2:\n                    UID = _context6.sent;\n\n                    if (UID) {\n                      _context6.next = 5;\n                      break;\n                    }\n\n                    return _context6.abrupt(\"return\", reject({\n                      message: errorMessages.memberNotAuthd\n                    }));\n\n                  case 5:\n                    if (firstName) {\n                      _context6.next = 7;\n                      break;\n                    }\n\n                    return _context6.abrupt(\"return\", reject({\n                      message: errorMessages.missingFirstName\n                    }));\n\n                  case 7:\n                    if (lastName) {\n                      _context6.next = 9;\n                      break;\n                    }\n\n                    return _context6.abrupt(\"return\", reject({\n                      message: errorMessages.missingLastName\n                    }));\n\n                  case 9:\n                    if (!changeEmail) {\n                      _context6.next = 12;\n                      break;\n                    }\n\n                    if (email) {\n                      _context6.next = 12;\n                      break;\n                    }\n\n                    return _context6.abrupt(\"return\", reject({\n                      message: errorMessages.missingEmail\n                    }));\n\n                  case 12:\n                    if (!changePassword) {\n                      _context6.next = 19;\n                      break;\n                    }\n\n                    if (password) {\n                      _context6.next = 15;\n                      break;\n                    }\n\n                    return _context6.abrupt(\"return\", reject({\n                      message: errorMessages.missingPassword\n                    }));\n\n                  case 15:\n                    if (password2) {\n                      _context6.next = 17;\n                      break;\n                    }\n\n                    return _context6.abrupt(\"return\", reject({\n                      message: errorMessages.missingPassword\n                    }));\n\n                  case 17:\n                    if (!(password !== password2)) {\n                      _context6.next = 19;\n                      break;\n                    }\n\n                    return _context6.abrupt(\"return\", reject({\n                      message: errorMessages.passwordsDontMatch\n                    }));\n\n                  case 19:\n                    return _context6.abrupt(\"return\", FirebaseRef.child(\"users/\".concat(UID)).update({\n                      firstName: firstName,\n                      lastName: lastName\n                    }).then(\n                    /*#__PURE__*/\n                    _asyncToGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee5() {\n                      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              if (!changeEmail) {\n                                _context5.next = 3;\n                                break;\n                              }\n\n                              _context5.next = 3;\n                              return Firebase.auth().currentUser.updateEmail(email).catch(reject);\n\n                            case 3:\n                              if (!changePassword) {\n                                _context5.next = 6;\n                                break;\n                              }\n\n                              _context5.next = 6;\n                              return Firebase.auth().currentUser.updatePassword(password).catch(reject);\n\n                            case 6:\n                              return _context5.abrupt(\"return\", resolve());\n\n                            case 7:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }))).catch(reject));\n\n                  case 20:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n\n          return function (_x8, _x9) {\n            return _ref5.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          throw err.message;\n        });\n      },\n\n      /**\n       * Logout\n       *\n       * @returns {Promise}\n       */\n      logout: function logout() {\n        var _this5 = this;\n\n        return new Promise(function (resolve, reject) {\n          return Firebase.auth().signOut().then(function () {\n            _this5.resetUser();\n\n            resolve();\n          }).catch(reject);\n        }).catch(function (err) {\n          throw err.message;\n        });\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/Users/Crocslut/Desktop/STT/ssipr-proto/src/models/member.js"],"names":["errorMessages","Firebase","FirebaseRef","state","reducers","setUserLogin","payload","uid","email","emailVerified","setUserDetails","firstName","lastName","signedUp","role","resetUser","effects","dispatch","signUp","formData","password","password2","Promise","resolve","reject","message","missingFirstName","missingLastName","missingEmail","missingPassword","passwordsDontMatch","auth","createUserWithEmailAndPassword","then","res","user","child","set","database","ServerValue","TIMESTAMP","lastLoggedIn","catch","err","listenForMemberProfileUpdates","UID","currentUser","ref","on","snapshot","userData","val","getMemberData","onAuthStateChanged","loggedIn","login","length","setPersistence","Auth","Persistence","LOCAL","signInWithEmailAndPassword","userDetails","update","sendEmailVerification","console","log","resetPassword","sendPasswordResetEmail","updateProfile","changeEmail","changePassword","memberNotAuthd","updateEmail","updatePassword","logout","signOut"],"mappings":"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","sourcesContent":["import { errorMessages } from '../constants/messages';\nimport { Firebase, FirebaseRef } from '../lib/firebase';\n\nexport default {\n  state: {}, // initial state\n\n  /**\n   * Reducers\n   */\n  reducers: {\n    setUserLogin(state, payload) {\n      const { uid, email, emailVerified } = payload;\n\n      return {\n        ...state,\n        uid,\n        email,\n        emailVerified,\n      };\n    },\n\n    setUserDetails(state, payload) {\n      const {\n        firstName, lastName, signedUp, role,\n      } = payload;\n\n      return {\n        ...state,\n        firstName,\n        lastName,\n        signedUp,\n        role,\n      };\n    },\n\n    resetUser() {\n      return {};\n    },\n  },\n\n  /**\n   * Effects/Actions\n   */\n  effects: dispatch => ({\n    /**\n     * Sign Up\n     *\n     * @param {obj} formData - data from form\n     * @return {Promise}\n     */\n    signUp(formData) {\n      const {\n        email, password, password2, firstName, lastName,\n      } = formData;\n\n      return new Promise(async (resolve, reject) => {\n        // Validation rules\n        if (!firstName) return reject({ message: errorMessages.missingFirstName });\n        if (!lastName) return reject({ message: errorMessages.missingLastName });\n        if (!email) return reject({ message: errorMessages.missingEmail });\n        if (!password) return reject({ message: errorMessages.missingPassword });\n        if (!password2) return reject({ message: errorMessages.missingPassword });\n        if (password !== password2) return reject({ message: errorMessages.passwordsDontMatch });\n\n        // Go to Firebase\n        return Firebase.auth().createUserWithEmailAndPassword(email, password)\n          .then((res) => {\n            // Send user details to Firebase database\n            if (res && res.user.uid) {\n              FirebaseRef.child(`users/${res.user.uid}`).set({\n                firstName,\n                lastName,\n                signedUp: Firebase.database.ServerValue.TIMESTAMP,\n                lastLoggedIn: Firebase.database.ServerValue.TIMESTAMP,\n              }).then(resolve);\n            }\n          }).catch(reject);\n      }).catch((err) => { throw err.message; });\n    },\n\n    /**\n     * Listen for realtime updates on the current user\n     */\n    listenForMemberProfileUpdates() {\n      const UID = (\n        FirebaseRef\n        && Firebase\n        && Firebase.auth()\n        && Firebase.auth().currentUser\n        && Firebase.auth().currentUser.uid\n      ) ? Firebase.auth().currentUser.uid : null;\n\n      if (!UID) return false;\n\n      const ref = FirebaseRef.child(`users/${UID}`);\n\n      return ref.on('value', (snapshot) => {\n        const userData = snapshot.val() || [];\n\n        this.setUserDetails(userData); // Send to reducer\n      });\n    },\n\n    /**\n     * Get the current Member's Details\n     *\n     * @returns {Promise}\n     */\n    getMemberData() {\n      if (Firebase === null) return new Promise(resolve => resolve);\n\n      // Ensure token is up to date\n      return new Promise((resolve) => {\n        Firebase.auth().onAuthStateChanged((loggedIn) => {\n          if (loggedIn) {\n            this.listenForMemberProfileUpdates(dispatch);\n            return resolve();\n          }\n\n          return new Promise(() => resolve);\n        });\n      });\n    },\n\n    /**\n     * Login to Firebase with Email/Password\n     *\n     * @param {obj} formData - data from form\n     * @return {Promise}\n     */\n    login(formData) {\n      const { email, password } = formData;\n\n      return new Promise(async (resolve, reject) => {\n        // Validation rules\n        if (!email || email.length === 0) return reject({ message: errorMessages.missingEmail });\n        if (!password || password.length === 0) {\n          return reject({ message: errorMessages.missingPassword });\n        }\n\n        // Go to Firebase\n        return Firebase.auth().setPersistence(Firebase.auth.Auth.Persistence.LOCAL)\n          .then(() => Firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(async (res) => {\n              const userDetails = res && res.user ? res.user : null;\n\n              // Save the user's login data (email, UID)\n              this.setUserLogin(userDetails);\n\n              // Update last logged in data\n              if (userDetails.uid) {\n                FirebaseRef.child(`users/${userDetails.uid}`).update({\n                  lastLoggedIn: Firebase.database.ServerValue.TIMESTAMP,\n                });\n\n                // Send verification Email when email hasn't been verified\n                if (userDetails.emailVerified === false) {\n                  Firebase.auth().currentUser.sendEmailVerification()\n                    .catch(() => console.log('Verification email failed to send'));\n                }\n\n                // Get/Save User Profile (name, signed up date etc)\n                this.listenForMemberProfileUpdates(dispatch);\n              }\n\n              return resolve();\n            }).catch(reject));\n      }).catch((err) => { throw err.message; });\n    },\n\n    /**\n     * Reset Password\n     *\n     * @param {obj} formData - data from form\n     * @return {Promise}\n     */\n    resetPassword(formData) {\n      const { email } = formData;\n\n      return new Promise(async (resolve, reject) => {\n        // Validation rules\n        if (!email) return reject({ message: errorMessages.missingEmail });\n\n        // Go to Firebase\n        return Firebase.auth().sendPasswordResetEmail(email)\n          .then(() => {\n            this.resetUser();\n            resolve();\n          }).catch(reject);\n      }).catch((err) => { throw err.message; });\n    },\n\n    /**\n     * Update Profile\n     *\n     * @param {obj} formData - data from form\n     * @return {Promise}\n     */\n    updateProfile(formData) {\n      const {\n        email, password, password2, firstName, lastName, changeEmail, changePassword,\n      } = formData;\n\n      return new Promise(async (resolve, reject) => {\n        // Are they a user?\n        const UID = await Firebase.auth().currentUser.uid;\n        if (!UID) return reject({ message: errorMessages.memberNotAuthd });\n\n        // Validation rules\n        if (!firstName) return reject({ message: errorMessages.missingFirstName });\n        if (!lastName) return reject({ message: errorMessages.missingLastName });\n        if (changeEmail) {\n          if (!email) return reject({ message: errorMessages.missingEmail });\n        }\n        if (changePassword) {\n          if (!password) return reject({ message: errorMessages.missingPassword });\n          if (!password2) return reject({ message: errorMessages.missingPassword });\n          if (password !== password2) return reject({ message: errorMessages.passwordsDontMatch });\n        }\n\n        // Go to Firebase\n        return FirebaseRef.child(`users/${UID}`).update({ firstName, lastName })\n          .then(async () => {\n            // Update Email address\n            if (changeEmail) {\n              await Firebase.auth().currentUser.updateEmail(email).catch(reject);\n            }\n\n            // Change the Password\n            if (changePassword) {\n              await Firebase.auth().currentUser.updatePassword(password).catch(reject);\n            }\n\n            return resolve();\n          }).catch(reject);\n      }).catch((err) => { throw err.message; });\n    },\n\n    /**\n     * Logout\n     *\n     * @returns {Promise}\n     */\n    logout() {\n      return new Promise((resolve, reject) => Firebase.auth().signOut()\n        .then(() => {\n          this.resetUser();\n          resolve();\n        }).catch(reject)).catch((err) => { throw err.message; });\n    },\n\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}